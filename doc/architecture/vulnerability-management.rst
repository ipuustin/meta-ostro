Ostro OS vulnerability handling
###############################

Introduction
============

Software vulnerabilities are found continuously even in mature pieces
of software. This means that one of the key objectives of a Linux
distribution is pushing fixes to vulnerabilities down to the end users.
Ostro OS images will not be used as-is by end users, but Ostro OS
will be the base software distribution for many products the Ostro OS
customers are developing. These products must be kept secure for their
expected lifetime. The published Ostro OS images are for development
purposes only and should not be used in real products. The Ostro OS
customers developing products need to create their own Ostro OS images.

Finding vulnerabilities
=======================

The Ostro Project security team must find out about vulnerabilities in
Ostro OS. These can be new ones or introduced when Ostro OS content is
changed. The `cve-check-tool <https://github.com/ikeydoherty/cve-check-
tool>`_ is run during Ostro OS builds. The tool creates a file that
maps current Ostro OS recipes against known vulnerabilities for the
particular software versions. This file provides information about open
CVE issues affecting components in Ostro OS, but has some limitations
because not all CVE issues are exactly mapped to packages. For those
components, such as Linux kernel, CVEs and vulnerability reports have
to be investigated separately. Also, cve-check-tool doesn't report
vulnerabilities that are not found in the vulnerability database.

When Ostro OS -specific vulnerabilities are found that don't have a CVE
entry, the person finding them can notify the Ostro OS Security Team by
reporting the vulnerability using the secure contact email address and
public key for communication encryption.

Ostro project has a Security Officer (with a backup person) who reads
the email address, follows the report generated by ``cve-check-tool``,
follows the security advisories provided by the Yocto Project in yocto-
security@yoctoproject.org mailing list, and follows the relevant open-
source component vulnerability reporting mailing lists such as oss-
security. The person is responsible for following up with vulnerability
reports. The correct procedure is to analyze the issue and then file a
report to Ostro OS issue tracker if required.

An important consideration is that Ostro Project does not catch the
vulnerabilities in software not part of the core Ostro OS but deployed
by customers. These customers need to track the potential security
vulnerabilities in those software components themselves or rely on the
Yocto project or other upstream meta-layer maintainers to handle the
detection and fixing of the vulnerabilities.

Fixing vulnerabilities
======================

When a new vulnerability in Ostro OS or in a component used by Ostro OS
is detected, the first step is to assess if the vulnerability affects
Ostro OS. This is done by examining the vulnerability report, Ostro OS
component version, and potentially running any proof-of-concept
exploits or vulnerability checks distributed with the vulnerability
report. It is possible that the Ostro OS security mechanisms, such as
minimal configuration of system services, already prevent the
vulnerability from directly affecting Ostro OS. If that’s the case, the
risk level of the vulnerability will naturally be lower.

If Ostro OS is affected by the vulnerability, the vulnerability details
will determine its risk level. For example: remotely exploitable issues
are the worst, since they jeopardize IoT devices directly, but if the
vulnerability is locally exploitable by applications, risk level will be
somewhat lower. Ostro OS vulnerability risk levels are determined using
`Common Vulnerability Scoring System <https://nvd.n
ist.gov/cvss.cfm?calculator&adv&version=2>`_. Based on the result of the
CVSS tool and the Ostro Project security team’s own vulnerability
assessment, the security team takes action for getting the vulnerability
fixed.

If the vulnerability is considered to be critical, a typical response
is adding a patch to ``meta-ostro-fixes`` repository, releasing the
patch in ``ostro-os`` repository, reporting the bug to the meta-layer
which provides the component in question, and sending out an Ostro OS
security advisory. The patch either updates the component in question
to a version which doesn’t have the vulnerability or backports the fix
if moving to a new component version is not desired. If the component
cannot be fixed quickly, the security team needs to consider disabling
it from Ostro OS temporarily. If the security vulnerability is critical
enough and it is estimated to put existing Ostro OS -based devices in
serious danger, Ostro OS can make an unscheduled release to get the bug
fix quickly to a wider audience.

If the vulnerability is not critical and it’s expected that upstream
meta-layer providing the component will handle it promptly, it is often
enough to make sure the upstream meta-layer is aware of the issue, and
then just wait for a fix to be delivered via the normal update mechanism
into Ostro OS. It's understood that the default mechanism for how
security fixes come to Ostro OS is via the upstream meta-layers.

If the vulnerability is in Ostro OS core, the problem needs to be fixed
in Ostro OS itself, and the upstream considerations are not necessary.

Finally, the processing of the vulnerability leads to a (periodic) look
at Ostro OS security architecture. The Ostro Project security team has
to consider if Ostro OS security architecture needs be adapted to
better protect against the vulnerability and others like it. This is
continuous work and eventually lead to an Ostro OS security
architecture that is well prepared to handle many vulnerability
classes.

Tracking and discussing the security vulnerability and the fix to it
will happen in the Ostro OS issue tracker. The security vulnerabilities
in the issue tracker need to be classified so that it’s easy to see the
distribution’s security vulnerability status by doing a single search in
the issue tracker.

Getting updates to client devices
=================================

The Ostro Project doesn't provide binaries to end users, meaning people
who run devices which have Ostro OS -based distributions. Instead the
Ostro OS customers are ODMs, which create and distribute binaries to the
devices. For this reason, it’s paramount that the ODMs actively track
Ostro OS security issues and also deliver security updates to their end
users via the normal software update process. Ostro OS is an
open-source project, so Ostro Project itself does not necessarily know
which ODMs actually use Ostro OS code in their devices.

Ostro OS development images can be updated using the built-in software
update mechanism (swupd). The updates need to be triggered manually.
Images that have ``-noswupd`` in the image name cannot be updated using
the Ostro OS software update mechanism.

In order to inform the Ostro OS customers about any security fixes a
public mailing list ostro-security@ostroproject.org is set up. An email
message will be sent to this list whenever Ostro OS has in the ``ostro-
os`` git repository a fix for a critical vulnerability. All Ostro OS
customers are expected to follow this mailing list. Customers are also
told to follow Ostro OS releases and provide at least security updates
to the end users.

Maintaining releases
====================

Ostro OS has a rolling release model, following Clear Linux example.
Typically, a minor release will be done each month from the Ostro OS
master branch. The releases done from the master branch don’t have a
maintenance period, but since a new release is expected to arrive each
month, customers will get security updates promptly. Due to the nature
of the rolling release process, additional bugfix releases can be done
easily if critical security vulnerabilities get fixed in Ostro OS.

If a customer wants to have a security fix promptly, they can download
it directly from ``ostro-os`` git repository.
